#!/bin/sh

source `dirname $0`/common-vars.sh
source "${SYNOPKG_PKGDEST_OPENHAB_ENV}"

#    Licensed to the Apache Software Foundation (ASF) under one or more
#    contributor license agreements.  See the NOTICE file distributed with
#    this work for additional information regarding copyright ownership.
#    The ASF licenses this file to You under the Apache License, Version 2.0
#    (the "License"); you may not use this file except in compliance with
#    the License.  You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.
#
# Karaf control script
# description: Karaf startup script
# processname: ${KARAF_SERVICE_NAME}
# pidfile: ${KARAF_SERVICE_PIDFILE}
# config: ${KARAF_SERVICE_CONF}
#

################################################

KARAF_SERVICE_CONF=`dirname $0`/karaf-service.sh

################################################

if [ -r "${KARAF_SERVICE_CONF}" ]; then
    . "${KARAF_SERVICE_CONF}"
else
    echo "Error KARAF_SERVICE_CONF not defined"
    exit -1
fi

# Location of JDK
if [ -n "$JAVA_HOME" ]; then
    export JAVA_HOME
fi

# Setup the JVM
if [ -z "$JAVA" ]; then
    if [ -n "$JAVA_HOME" ]; then
        JAVA="$JAVA_HOME/bin/java"
    else
        JAVA="java"
    fi
fi

if [ -z "$STARTUP_WAIT" ]; then
    STARTUP_WAIT=30
fi

if [ -z "$SHUTDOWN_WAIT" ]; then
    SHUTDOWN_WAIT=30
fi

prog=${KARAF_SERVICE_NAME}

do_prestart() {
    [[ ! -d "$JAVA_HOME" ]] && echo "JAVA_HOME does not exist at: $JAVA_HOME" && exit 1

    # TODO: Adding our if-clause here whether to expose on share or not
    # TODO: Remove this stuff once we can read them out via Syno app
    [[ -f "${SHARE_OPENHAB}/uuid" ]] && rm ${SHARE_OPENHAB}/uuid
    [[ -f "${PKGDEST_OPENHAB}/userdata/uuid" ]] && cp "${PKGDEST_OPENHAB}/userdata/uuid" ${SHARE_OPENHAB}

    [[ -f "${SHARE_OPENHAB}/openhabcloud-secret" ]] && rm ${SHARE_OPENHAB}/openhabcloud-secret
    [[ -f "${PKGDEST_OPENHAB}/userdata/openhabcloud/secret" ]] && cp "${PKGDEST_OPENHAB}/userdata/openhabcloud/secret" ${SHARE_OPENHAB}/openhabcloud-secret

    exit 0
}

do_start() {
    echo "Starting $prog: "
    if [ -f "$KARAF_SERVICE_PIDFILE" ]; then
        read ppid < "$KARAF_SERVICE_PIDFILE"
        if [ `ps -p $ppid 2> /dev/null | grep -c $ppid 2> /dev/null` -eq '1' ]; then
            echo "$prog is already running"
            return 1
        else
            rm -f "$KARAF_SERVICE_PIDFILE"
        fi
    fi

    LOG_PATH=`dirname "$KARAF_SERVICE_LOG"`
    mkdir -p "$LOG_PATH"
    cat /dev/null > "$KARAF_SERVICE_LOG"
    chown $KARAF_SERVICE_USER:$KARAF_SERVICE_GROUP  "$KARAF_SERVICE_LOG"

    PID_PATH=`dirname "$KARAF_SERVICE_PIDFILE"`
    mkdir -p "$PID_PATH"
    chown $KARAF_SERVICE_USER:$KARAF_SERVICE_GROUP "$PID_PATH" || true

    if [ ! -z "$KARAF_SERVICE_USER" ]; then
        KARAF_EXEC=exec
        export KARAF_EXEC

        echo " * OPENHAB_HTTP_ADDRESS: $OPENHAB_HTTP_ADDRESS"
        export OPENHAB_HTTP_ADDRESS
        echo " * OPENHAB_HTTP_PORT: $OPENHAB_HTTP_PORT"
        export OPENHAB_HTTP_PORT
        echo " * OPENHAB_HTTPS_PORT: $OPENHAB_HTTPS_PORT"
        export OPENHAB_HTTPS_PORT

        echo " * ORG_APACHE_KARAF_STARTREMOTESHELL: $ORG_APACHE_KARAF_STARTREMOTESHELL"
        export ORG_APACHE_KARAF_STARTREMOTESHELL
        echo " * ORG_APACHE_KARAF_SHELL_SSHHOST: $ORG_APACHE_KARAF_SHELL_SSHHOST"
        export ORG_APACHE_KARAF_SHELL_SSHHOST
        echo " * ORG_APACHE_KARAF_SHELL_SSHPORT: $ORG_APACHE_KARAF_SHELL_SSHPORT"
        export ORG_APACHE_KARAF_SHELL_SSHPORT

        echo " * EXTRA_JAVA_OPTS $EXTRA_JAVA_OPTS"
        export EXTRA_JAVA_OPTS

        "$KARAF_SERVICE_PATH/bin/$KARAF_SERVICE_EXECUTABLE" daemon >> "$KARAF_SERVICE_LOG" 2>&1 &

        echo $! > "$KARAF_SERVICE_PIDFILE"

        sleep 1
        if [ -f "$KARAF_SERVICE_PIDFILE" ]; then
            chown $KARAF_SERVICE_USER:$KARAF_SERVICE_GROUP "$KARAF_SERVICE_PIDFILE"
        fi
    fi

    RETVAL=$?
    return $RETVAL
}

do_prestop() {
    # TODO: Remove this stuff once we can read them out via Syno app
    [[ -f "${SHARE_OPENHAB}/uuid" ]] && rm ${SHARE_OPENHAB}/uuid

    [[ -f "${SHARE_OPENHAB}/openhabcloud-secret" ]] && rm ${SHARE_OPENHAB}/openhabcloud-secret

    exit 0
}

do_stop() {
    echo $"Stopping $prog: "
    count=0;

    if [ -f "$KARAF_SERVICE_PIDFILE" ]; then
        read kpid < "$KARAF_SERVICE_PIDFILE"
        kwait=$SHUTDOWN_WAIT

        JAVA_HOME=$JAVA_HOME
        export JAVA_HOME

        "$KARAF_SERVICE_PATH/bin/$KARAF_SERVICE_EXECUTABLE" stop >> "$KARAF_SERVICE_LOG" 2>&1

        until [ `ps -p $kpid 2> /dev/null | grep -c $kpid 2> /dev/null` -eq '0' ] || [ $count -gt $kwait ]
        do
            sleep 1
            count=`expr $count + 1`
        done

        if [ $count -gt $kwait ]; then
            if [ `ps -p $kpid 2> /dev/null | grep -c $kpid 2> /dev/null` -eq '1' ]; then
                kill -9 $kpid
            fi
        fi
    fi

    rm -f "$KARAF_SERVICE_PIDFILE"
    rm -f $KARAF_LOCKFILE
}

do_status() {
    if [ -f "$KARAF_SERVICE_PIDFILE" ]; then
        read ppid < "$KARAF_SERVICE_PIDFILE"
        if [ `ps -p $ppid 2> /dev/null | grep -c $ppid 2> /dev/null` -eq '1' ]; then
            echo "$prog is running (pid $ppid)"
            return 0
        else
            echo "$prog dead but pid file exists"
            return 1
        fi
    fi
    echo "$prog is not running"
    return 3
}

case "$1" in
    prestart)
        do_prestart
        ;;
    start)
        do_start
        ;;
    prestop)
        do_prestop
        ;;
    stop)
        do_stop
        ;;
    restart)
        do_stop
        do_start
        ;;
    status)
        do_status
        ;;
    log)
        echo "${SYNOPKG_PKGDEST}/userdata/logs/openhab.log"
        exit 0
        ;;
    *)
        ## If no parameters are given, print which are avaiable.
        echo "Usage: $0 {start|stop|status|restart}"
        exit 1
        ;;
esac
